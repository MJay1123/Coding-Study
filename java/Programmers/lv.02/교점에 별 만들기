Ax + By + C = 0으로 표현할 수 있는 n개의 직선이 주어질 때, 이 직선의 교점 중 정수 좌표에 별을 그리려 합니다.

예를 들어, 다음과 같은 직선 5개를

2x - y + 4 = 0
-2x - y + 4 = 0
-y + 1 = 0
5x - 8y - 12 = 0
5x + 8y + 12 = 0
좌표 평면 위에 그리면 아래 그림과 같습니다.

RisingStarGraphBox.jpg

이때, 모든 교점의 좌표는 (4, 1), (4, -4), (-4, -4), (-4, 1), (0, 4), (1.5, 1.0), (2.1, -0.19), (0, -1.5), (-2.1, -0.19), (-1.5, 1.0)입니다. 이 중 정수로만 표현되는 좌표는 (4, 1), (4, -4), (-4, -4), (-4, 1), (0, 4)입니다.

만약 정수로 표현되는 교점에 별을 그리면 다음과 같습니다.

RisingStarGraphStar.jpg

위의 그림을 문자열로 나타낼 때, 별이 그려진 부분은 *, 빈 공간(격자선이 교차하는 지점)은 .으로 표현하면 다음과 같습니다.

"..........."  
".....*....."  
"..........."  
"..........."  
".*.......*."  
"..........."  
"..........."  
"..........."  
"..........."  
".*.......*."  
"..........."  
이때 격자판은 무한히 넓으니 모든 별을 포함하는 최소한의 크기만 나타내면 됩니다.

따라서 정답은

"....*...."  
"........."  
"........."  
"*.......*"  
"........."  
"........."  
"........."  
"........."  
"*.......*"  
입니다.

직선 A, B, C에 대한 정보가 담긴 배열 line이 매개변수로 주어집니다. 이때 모든 별을 포함하는 최소 사각형을 return 하도록 solution 함수를 완성해주세요.

제한사항
line의 세로(행) 길이는 2 이상 1,000 이하인 자연수입니다.
line의 가로(열) 길이는 3입니다.
line의 각 원소는 [A, B, C] 형태입니다.
A, B, C는 -100,000 이상 100,000 이하인 정수입니다.
무수히 많은 교점이 생기는 직선 쌍은 주어지지 않습니다.
A = 0이면서 B = 0인 경우는 주어지지 않습니다.
정답은 1,000 * 1,000 크기 이내에서 표현됩니다.
별이 한 개 이상 그려지는 입력만 주어집니다.
---------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.*;
class Solution {
    static List<List<Integer>> combinationList = new ArrayList<>();
    static List<Location> locationList = new ArrayList<>();
    static boolean[] visited;
    static int lineCount;
    static long maxX, minX, maxY, minY;
    public String[] solution(int[][] line) {
        lineCount = line.length;
        visited = new boolean[lineCount];
        combination(0,0);
        getCrossPoints(line);
        
        maxX = locationList.get(0).x;
        maxY = locationList.get(0).y;
        minX = locationList.get(0).x;
        minY = locationList.get(0).y;
        
        for(int i=1; i<locationList.size(); i++){
            Location loc = locationList.get(i);
            maxX = Math.max(maxX, loc.x);
            maxY = Math.max(maxY, loc.y);
            minX = Math.min(minX, loc.x);
            minY = Math.min(minY, loc.y);
        }
        
        String[] answer = new String[(int)(maxY - minY) + 1];
        int index = 0;
        for(long y=maxY; y>=minY; y--){
            StringBuilder sb = new StringBuilder();
            for(long x=minX; x<=maxX; x++){
                Location loc = new Location(x, y);
                if(locationList.contains(loc)){
                    sb.append("*");
                } else {
                    sb.append(".");
                }
            }
            String result = sb.toString();
            answer[index] = result;
            index++;
        }
        return answer;
    }
    
    public static void getCrossPoints(int[][] line){
        for(int i=0; i<combinationList.size(); i++){
            List<Integer> list = combinationList.get(i);
            int[] line1 = line[list.get(0)];
            int[] line2 = line[list.get(1)];
            double a = line1[0];
            double b = line1[1];
            double e = line1[2];
            double c = line2[0];
            double d = line2[1];
            double f = line2[2];
            if(a*d - b*c == 0){
                continue;
            }
            double x = (b*f - e*d) / (a*d - b*c);
            double y = (e*c - a*f) / (a*d - b*c);

            if(x % 1 == 0.0 && y % 1 == 0.0){
                Location loc = new Location((long)x, (long)y);
                locationList.add(loc);
            }
        }
    }
    
    public static void combination(int index, int depth){
        if(depth == 2){
            List<Integer> list = new ArrayList<>();
            for(int i=0; i<lineCount; i++){
                if(visited[i]){
                    list.add(i);
                }
            }
            combinationList.add(list);
            return;
        }
        if(index >= lineCount){
            return;
        }
        visited[index] = true;
        combination(index+1, depth+1);
        visited[index] = false;
        combination(index+1, depth);
    }
    
    static class Location{
        long x;
        long y;
        public Location(long x, long y){
            this.x = x;
            this.y = y;
        }
        
        @Override
        public int hashCode(){
            return 0;
        }
        
        @Override
        public boolean equals(Object o){
            Location loc = (Location)o;
            return(this.x == loc.x && this.y == loc.y);
        }
    }
}
