1 x 1 크기의 칸들로 이루어진 직사각형 격자 형태의 미로에서 탈출하려고 합니다. 각 칸은 통로 또는 벽으로 구성되어 있으며, 벽으로 된 칸은 지나갈 수 없고 통로로 된 칸으로만 이동할 수 있습니다. 통로들 중 한 칸에는 미로를 빠져나가는 문이 있는데, 이 문은 레버를 당겨서만 열 수 있습니다. 레버 또한 통로들 중 한 칸에 있습니다. 따라서, 출발 지점에서 먼저 레버가 있는 칸으로 이동하여 레버를 당긴 후 미로를 빠져나가는 문이 있는 칸으로 이동하면 됩니다. 이때 아직 레버를 당기지 않았더라도 출구가 있는 칸을 지나갈 수 있습니다. 미로에서 한 칸을 이동하는데 1초가 걸린다고 할 때, 최대한 빠르게 미로를 빠져나가는데 걸리는 시간을 구하려 합니다.

미로를 나타낸 문자열 배열 maps가 매개변수로 주어질 때, 미로를 탈출하는데 필요한 최소 시간을 return 하는 solution 함수를 완성해주세요. 만약, 탈출할 수 없다면 -1을 return 해주세요.

제한사항
5 ≤ maps의 길이 ≤ 100
5 ≤ maps[i]의 길이 ≤ 100
maps[i]는 다음 5개의 문자들로만 이루어져 있습니다.
S : 시작 지점
E : 출구
L : 레버
O : 통로
X : 벽
시작 지점과 출구, 레버는 항상 다른 곳에 존재하며 한 개씩만 존재합니다.
출구는 레버가 당겨지지 않아도 지나갈 수 있으며, 모든 통로, 출구, 레버, 시작점은 여러 번 지나갈 수 있습니다.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.*;
class Solution {
    static String[][] map;
    static int[][] distanceMap;
    static int[][] distanceMap2;
    static boolean[][] visited;
    static int[][] move = {{1,0},{0,1},{-1,0},{0,-1}};
    static int N;
    static int M;
    static int SX, SY, LX, LY, EX, EY;
    static boolean possible = true;
    public int solution(String[] maps) {
        int answer = 0;
        N = maps.length;
        M = maps[0].length();
        map = new String[N][M];
        distanceMap = new int[N][M];
        visited = new boolean[N][M];
        for(int i=0; i<N; i++){
            String[] array = maps[i].split("");
            for(int j=0; j<M; j++){
                map[i][j] = array[j];
                if(!map[i][j].equals("X")){
                    distanceMap[i][j] = 1;
                    if(map[i][j].equals("S")){
                        SX = i;
                        SY = j;
                    } else if(map[i][j].equals("E")){
                        EX = i;
                        EY = j;
                    } else if(map[i][j].equals("L")){
                        LX = i;
                        LY = j;
                    }
                }
            }
        }
        BFS(new Location(SX, SY));
        if(!visited[LX][LY]){
            possible = false;
        } else {
            answer += distanceMap[LX][LY] - 1;
        }
        
        visited = new boolean[N][M];
 
        BFS(new Location(LX, LY));                          // 출구까지 도달하기
        if(!visited[EX][EY]){
            possible = false;
        } else {
            answer += distanceMap[EX][EY] - 1;
        }
        

        if(possible){
            return answer;
        } else {
            return -1;
        }
    }
    
    public static void BFS(Location loc){
        Queue<Location> queue = new LinkedList<>();
        queue.add(loc);
        int x = loc.x;
        int y = loc.y;
        distanceMap[x][y] = 1;
        visited[x][y] = true;
        while(!queue.isEmpty()){
            loc = queue.poll();
            x = loc.x;
            y = loc.y;
            for(int i=0; i<4; i++){
                int nx = x + move[i][0];
                int ny = y + move[i][1];
                if(checkRange(nx, ny) && distanceMap[nx][ny] != 0 && !visited[nx][ny]){
                    queue.add(new Location(nx, ny));
                    visited[nx][ny] = true;
                    distanceMap[nx][ny] = distanceMap[x][y] + 1;
                }
            }
        }
    }
    
    static class Location {
        int x;
        int y;
        public Location(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
    
    public static boolean checkRange(int x, int y){
        return (x >= 0 && x < N && y >= 0 && y < M);
    }
}
