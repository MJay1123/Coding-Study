틱택토는 단순한 규칙으로 게임이 금방 끝나기에 머쓱이는 한 게임이 종료되면 다시 3x3 빈칸을 그린 뒤 다시 게임을 반복했습니다.
그렇게 틱택토 수 십 판을 했더니 머쓱이는 게임 도중에 다음과 같이 규칙을 어기는 실수를 했을 수도 있습니다.

"O"를 표시할 차례인데 "X"를 표시하거나 반대로 "X"를 표시할 차례인데 "O"를 표시한다.
선공이나 후공이 승리해서 게임이 종료되었음에도 그 게임을 진행한다.
게임 도중 게임판을 본 어느 순간 머쓱이는 본인이 실수를 했는지 의문이 생겼습니다. 혼자서 틱택토를 했기에 게임하는 과정을 지켜본 사람이 없어 이를 알 수는 없습니다.
그러나 게임판만 봤을 때 실제로 틱택토 규칙을 지켜서 진행했을 때 나올 수 있는 상황인지는 판단할 수 있을 것 같고 문제가 없다면 게임을 이어서 하려고 합니다.

머쓱이가 혼자서 게임을 진행하다 의문이 생긴 틱택토 게임판의 정보를 담고 있는 문자열 배열 board가 매개변수로 주어질 때, 
이 게임판이 규칙을 지켜서 틱택토를 진행했을 때 나올 수 있는 게임 상황이면 1을 아니라면 0을 return 하는 solution 함수를 작성해 주세요.

제한사항
board의 길이 = board[i]의 길이 = 3
board의 원소는 모두 "O", "X", "."으로만 이루어져 있습니다.
board[i][j]는 i + 1행 j + 1열에 해당하는 칸의 상태를 나타냅니다.
"."은 빈칸을, "O"와 "X"는 해당 문자로 칸이 표시되어 있다는 의미입니다.
-----------------------------------------------------------------------------------------------
import java.util.*;
class Solution {
    public int solution(String[] board) {
        String[][] map = new String[3][3];
        for(int r=0; r<3; r++){
            String[] temp = board[r].split("");
            for(int c=0; c<3; c++){
                map[r][c] = temp[c];
            }
        }
        int[] countResult = checkCount(map);
        int[] lineResult = checkLine(map);
        if(lineResult[0] * lineResult[1] > 0){
            return 0;
        }
        if(countResult[0] > countResult[1] + 1 || countResult[0] < countResult[1]){
            return 0;
        }
        if(lineResult[0] == 1 && countResult[0] == 3 && countResult[1] == 3){
            return 0;
        }
        if(lineResult[0] == 1 && countResult[0] == 4 && countResult[1] == 4){
            return 0;
        }
        if(lineResult[1] == 1 && countResult[1] == 3 && countResult[0] == 4){
            return 0;
        }
        if(lineResult[1] == 1 && countResult[1] == 4 && countResult[0] == 5){
            return 0;
        }
        return 1;
    }
    
    public int[] checkCount(String[][] map){
        int countO = 0;
        int countX = 0;
        for(int r=0; r<3; r++){
            for(int c=0; c<3; c++){
                if(map[r][c].equals("O")){
                    countO++;
                } else if(map[r][c].equals("X")){
                    countX++;
                }
            }
        }
        int[] result = new int[2];
        result[0] = countO;
        result[1] = countX;
        return result;
    }
    
    public int[] checkLine(String[][] map){
        int countO = 0;
        int countX = 0;
        for(int r=0; r<3; r++){
            HashSet<String> hs = new HashSet<>();
            for(int c=0; c<3; c++){
                hs.add(map[r][c]);
            }
            if(!hs.contains(".") && hs.size() == 1){
                if(hs.contains("O")){
                    countO++;
                } else if(hs.contains("X")){
                    countX++;
                }
            }
        }
        for(int c=0; c<3; c++){
            HashSet<String> hs = new HashSet<>();
            for(int r=0; r<3; r++){
                hs.add(map[r][c]);
            }
            if(!hs.contains(".") && hs.size() == 1){
                if(hs.contains("O")){
                    countO++;
                } else if(hs.contains("X")){
                    countX++;
                }
            }
        }
        HashSet<String> hs = new HashSet<>();
        for(int i=0; i<3; i++){
            hs.add(map[i][i]);
        }
        if(!hs.contains(".") && hs.size() == 1){
            if(hs.contains("O")){
                countO++;
            } else if(hs.contains("X")){
                countX++;
            }
        }
        hs.clear();
        for(int i=0; i<3; i++){
            hs.add(map[i][2-i]);
        }
        if(!hs.contains(".") && hs.size() == 1){
            if(hs.contains("O")){
                countO++;
            } else if(hs.contains("X")){
                countX++;
            }
        }
        int[] result = new int[2];
        result[0] = countO;
        result[1] = countX;
        return result;
    }
}
