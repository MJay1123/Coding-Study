호텔을 운영 중인 코니는 최소한의 객실만을 사용하여 예약 손님들을 받으려고 합니다. 한 번 사용한 객실은 퇴실 시간을 기준으로 10분간 청소를 하고 다음 손님들이 사용할 수 있습니다.
예약 시각이 문자열 형태로 담긴 2차원 배열 book_time이 매개변수로 주어질 때, 코니에게 필요한 최소 객실의 수를 return 하는 solution 함수를 완성해주세요.

제한사항
1 ≤ book_time의 길이 ≤ 1,000
book_time[i]는 ["HH:MM", "HH:MM"]의 형태로 이루어진 배열입니다
[대실 시작 시각, 대실 종료 시각] 형태입니다.
시각은 HH:MM 형태로 24시간 표기법을 따르며, "00:00" 부터 "23:59" 까지로 주어집니다.
예약 시각이 자정을 넘어가는 경우는 없습니다.
시작 시각은 항상 종료 시각보다 빠릅니다.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.*;
class Solution {
    static int minimumRoom = 0;
    public int solution(String[][] book_time) {
        int answer = 0;
        List<Reservation> reservationList = new ArrayList<>();
        PriorityQueue<Reservation2> pq = new PriorityQueue<>();
        for(int i=0; i<book_time.length; i++){
            int start = timeChange(book_time[i][0]);
            int end = timeChange(book_time[i][1]);
            reservationList.add(new Reservation(start, end));
        }
        Collections.sort(reservationList);
        for(int i=0; i<reservationList.size(); i++){
            int start = reservationList.get(i).start;
            int end = reservationList.get(i).end;
            if(pq.isEmpty()){
                pq.offer(new Reservation2(start, end));
            } else {
                if(start >= pq.peek().end + 10){
                    pq.poll();
                    pq.offer(new Reservation2(start, end));
                } else {
                    pq.offer(new Reservation2(start, end));
                }
            }
            minimumRoom = Math.max(minimumRoom, pq.size());
        }
        answer = minimumRoom;
        return answer;
    }
    
    public static int timeChange(String time){
        String[] array = time.split(":");
        int hour = Integer.parseInt(array[0]);
        int minute = Integer.parseInt(array[1]);
        return hour * 60 + minute;
    }
    
    static class Reservation implements Comparable<Reservation> {   // 시작 시간을 기준으로 오름차순
        int start;
        int end;
        public Reservation(int start, int end){
            this.start = start;
            this.end = end;
        }
        @Override
        public int compareTo(Reservation o){
            if(this.start == o.start){
                return this.end - o.end;
            } else {
                return this.start - o.start;
            }
        }
        @Override
        public String toString(){
            return "[" + start + ", " + end + "]";
        }
    }
    
    static class Reservation2 implements Comparable<Reservation2> { // 끝나는 시간을 기준으로 오름차순
        int start;
        int end;
        public Reservation2(int start, int end){
            this.start = start;
            this.end = end;
        }
        @Override
        public int compareTo(Reservation2 o){
            return this.end - o.end;
        }
        @Override
        public String toString(){
            return "[" + start + ", " + end + "]";
        }
    }
}
