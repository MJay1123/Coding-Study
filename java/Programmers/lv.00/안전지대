다음 그림과 같이 지뢰가 있는 지역과 지뢰에 인접한 위, 아래, 좌, 우 대각선 칸을 모두 위험지역으로 분류합니다.
image.png
지뢰는 2차원 배열 board에 1로 표시되어 있고 board에는 지뢰가 매설 된 지역 1과, 지뢰가 없는 지역 0만 존재합니다.
지뢰가 매설된 지역의 지도 board가 매개변수로 주어질 때, 안전한 지역의 칸 수를 return하도록 solution 함수를 완성해주세요.
------------------------------------------------------------------------------------------------------------------------------
class Solution {
    
    static int[][] around = {{1,0},{-1,0},{0,1},{0,-1},{1,1},{-1,1},{-1,-1},{1,-1}};
    static boolean[][] dangerZone;
    static int N;       // 지도 세로 길이
    static int M;       // 지도 가로 길이
    
    public int solution(int[][] board) {
        int answer = 0;
        N = board.length;
        M = board[0].length;
        dangerZone = new boolean[N][M];
        
        for(int i=0; i<N; i++){
            for(int j=0; j<M; j++){
                if(board[i][j] == 1){
                    checkDanger(i, j);
                }
            }
        }
        
        int count = 0;
        for(int i=0; i<N; i++){
            for(int j=0; j<M; j++){
                if(dangerZone[i][j] == false){
                    count++;
                }
            }
        }
        answer = count;
        return answer;
    }
    
    public static void checkDanger(int x, int y){
        dangerZone[x][y] = true;
        for(int i=0; i<8; i++){
            int nx = x + around[i][0];
            int ny = y + around[i][1];
            if(checkRange(nx, ny)){
                dangerZone[nx][ny] = true;
            }
        }
    }
    
    public static boolean checkRange(int x, int y){
        return (x >= 0 && x < N && y >= 0 && y < M);
    }
}
